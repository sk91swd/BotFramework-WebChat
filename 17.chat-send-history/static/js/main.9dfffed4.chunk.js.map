{"version":3,"sources":["SendHistory.js","WebChat.js","App.js","index.js"],"names":["SendHistory","persist","arguments","length","undefined","Object","classCallCheck","this","_state","_index","_storageKey","_persist","JSON","parse","window","sessionStorage","getItem","_unused","add","_persistAfter","truncate","item","idx","indexOf","splice","unshift","reset","pop","fn","_this","_len","args","Array","_key","call","apply","concat","setItem","stringify","_default","props","possibleConstructorReturn","getPrototypeOf","state","directLine","fetchToken","fetch","method","res","json","token","setState","createDirectLine","react_default","a","createElement","lib_default","assign","className","React","Component","App","history","isDirty","store","createStore","next","action","type","payload","text","fromHistory","handleKeyDown","e","target","dataset","id","key","getNext","getPrevious","dispatch","onKeyDown","WebChat_default","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.9dfffed4.chunk.js","sourcesContent":["const HISTORY_SIZE = 25;\n\nclass SendHistory {\n  _state = [];\n  _index = -1;\n  _storageKey = 'WEBCHAT_SEND_HISTORY';\n\n  constructor(persist = true) {\n    this._persist = persist;\n\n    if (this._persist) {\n      try {\n        this._state = JSON.parse(window.sessionStorage.getItem(this._storageKey)) || [];\n      } catch {\n        this._state = [];\n      }\n\n      this.add = this._persistAfter(this.add);\n      this.truncate = this._persistAfter(this.truncate);\n    }\n  }\n\n  // better name?\n  isActive() {\n    return this._state.length > 0 && this._index > -1;\n  }\n\n  add(item) {\n    const idx = this._state.indexOf(item);\n\n    if (idx !== -1) {\n      this._state.splice(idx, 1);\n    }\n\n    this._state.unshift(item);\n\n    if (this._state.length > HISTORY_SIZE) {\n      this.truncate();\n    }\n  }\n\n  getNext() {\n    const item = this._state[this._index + 1];\n\n    if (item) {\n      this._index++;\n      return item;\n    }\n  }\n\n  getPrevious() {\n    const item = this._state[this._index - 1];\n\n    if (item) {\n      this._index--;\n      return item;\n    } else {\n      this.reset();\n      return '';\n    }\n  }\n\n  reset() {\n    this._index = -1;\n  }\n\n  truncate() {\n    this._state.pop();\n  }\n\n  _persistAfter(fn) {\n    return (...args) => {\n      fn.call(this, ...args);\n\n      if (this._persist) {\n        window.sessionStorage.setItem(this._storageKey, JSON.stringify(this._state));\n      }\n    };\n  }\n}\n\nexport default SendHistory;\n","import React from 'react';\n\nimport ReactWebChat, { createDirectLine } from 'botframework-webchat';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      directLine: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchToken();\n  }\n\n  async fetchToken() {\n    const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n    const { token } = await res.json();\n\n    this.setState(() => ({\n      directLine: createDirectLine({ token })\n    }));\n  }\n\n  render() {\n    return this.state.directLine ? (\n      <ReactWebChat className=\"chat\" directLine={this.state.directLine} {...this.props} />\n    ) : (\n      <div>Connecting to bot&hellip;</div>\n    );\n  }\n}\n","import React from 'react';\nimport { createStore } from 'botframework-webchat';\n\nimport SendHistory from './SendHistory';\nimport ReactWebChat from './WebChat';\n\nexport default class App extends React.Component {\n  history = new SendHistory();\n  state = {\n    isDirty: false\n  };\n\n  store = createStore({}, () => next => action => {\n    if (action.type === 'WEB_CHAT/SEND_MESSAGE') {\n      // add to history\n      this.history.add(action.payload.text);\n    } else if (!action.fromHistory && action.type === 'WEB_CHAT/SET_SEND_BOX') {\n      // sendbox was modified by the user, not history\n      this.setState({ isDirty: action.payload.text !== '' });\n      this.history.reset();\n    }\n\n    return next(action);\n  });\n\n  render() {\n    return (\n      <div className=\"app\" onKeyDown={this.handleKeyDown}>\n        <ReactWebChat store={this.store} />\n      </div>\n    );\n  }\n\n  handleKeyDown = e => {\n    const { target } = e;\n\n    if (!this.state.isDirty && target.dataset.id === 'webchat-sendbox-input') {\n      let text;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          text = this.history.getNext();\n          break;\n        case 'ArrowDown':\n          text = this.history.getPrevious();\n          break;\n        default:\n          return;\n      }\n\n      if (typeof text === 'string') {\n        this.store.dispatch({\n          type: 'WEB_CHAT/SET_SEND_BOX',\n          fromHistory: true,\n          payload: { text }\n        });\n      }\n    }\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}