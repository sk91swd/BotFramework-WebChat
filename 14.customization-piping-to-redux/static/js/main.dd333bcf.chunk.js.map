{"version":3,"sources":["dispatchIncomingActivityMiddleware.js","WebChat.js","App.js","registerServiceWorker.js","redux/actions.js","redux/reducer.js","redux/store.js","index.js"],"names":["dispatchIncomingActivityMiddleware","dispatch","next","action","type","activity","payload","from","role","name","value","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","store","createStore","appDispatch","state","fetchToken","setSendBox","fetch","method","res","json","token","setState","directLine","createDirectLine","text","react_default","a","createElement","lib_default","className","styleOptions","backgroundColor","React","Component","App","_this$props","id","style","WebChat_default","connect","_ref","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","SET_BACKGROUND_COLOR","DEFAULT_STATE","arguments","length","undefined","objectSpread","color","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dd333bcf.chunk.js","sourcesContent":["export default function(dispatch) {\n  return () => next => action => {\n    if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n      const { activity } = action.payload;\n\n      if (activity.type === 'event' && activity.from.role === 'bot' && activity.name === 'redux action') {\n        dispatch(activity.value);\n      }\n    }\n\n    return next(action);\n  };\n}\n","import React from 'react';\n\nimport ReactWebChat, { createDirectLine, createStore } from 'botframework-webchat';\nimport dispatchIncomingActivityMiddleware from './dispatchIncomingActivityMiddleware';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.store = createStore({}, dispatchIncomingActivityMiddleware(props.appDispatch));\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.fetchToken();\n    this.setSendBox();\n  }\n\n  async fetchToken() {\n    const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n    const { token } = await res.json();\n\n    this.setState(() => ({\n      directLine: createDirectLine({ token })\n    }));\n  }\n\n  setSendBox() {\n    this.store.dispatch({\n      type: 'WEB_CHAT/SET_SEND_BOX',\n      payload: { text: 'sample:redux-middleware' }\n    });\n  }\n\n  render() {\n    return this.state.directLine ? (\n      <ReactWebChat\n        className=\"chat\"\n        directLine={this.state.directLine}\n        store={this.store}\n        styleOptions={{\n          backgroundColor: 'Transparent'\n        }}\n      />\n    ) : (\n      <div>Connecting to bot&hellip;</div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport React from 'react';\n\nimport ReactWebChat from './WebChat';\n\nclass App extends React.Component {\n  render() {\n    const {\n      props: { backgroundColor, dispatch }\n    } = this;\n\n    return (\n      <div id=\"app\" style={{ backgroundColor }}>\n        <ReactWebChat appDispatch={dispatch} />\n      </div>\n    );\n  }\n}\n\nexport default connect(({ backgroundColor }) => ({ backgroundColor }))(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const SET_BACKGROUND_COLOR = 'SET_BACKGROUND_COLOR';\n\nfunction setBackgroundColor(color) {\n  return {\n    type: SET_BACKGROUND_COLOR,\n    payload: { color }\n  };\n}\n\nexport { SET_BACKGROUND_COLOR, setBackgroundColor };\n","import { SET_BACKGROUND_COLOR } from './actions';\n\n// Make a more compelling demo than just changing background color\n\nconst DEFAULT_STATE = {\n  backgroundColor: 'White'\n};\n\nexport default function(state = DEFAULT_STATE, { payload, type }) {\n  switch (type) {\n    case SET_BACKGROUND_COLOR:\n      state = { ...state, backgroundColor: payload.color };\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}\n","import { createStore } from 'redux';\n\nimport reducer from './reducer';\n\nexport default createStore(reducer);\n","import { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}